/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/health": {
    /** Health check */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              status?: string;
              /** Format: date-time */
              time?: string;
            };
          };
        };
      };
    };
  };
  "/assets": {
    /** List assets (paginated) */
    get: {
      parameters: {
        query?: {
          page?: number;
          pageSize?: number;
          sortBy?: "name" | "symbol" | "createdAt";
          sortDir?: "asc" | "desc";
          q?: string;
          symbolExact?: string;
        };
      };
      responses: {
        /** @description Asset list or duplicate check result */
        200: {
          content: {
            "application/json": OneOf<[{
              data?: components["schemas"]["Asset"][];
              page?: number;
              pageSize?: number;
              total?: number;
              totalPages?: number;
              sortBy?: string;
              sortDir?: string;
            }, {
              exists?: boolean;
              asset?: components["schemas"]["Asset"];
            }]>;
          };
        };
      };
    };
    /** Create asset */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["AssetCreate"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": components["schemas"]["Asset"];
          };
        };
      };
    };
  };
  "/assets/{id}": {
    /** Update asset */
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["AssetUpdate"];
        };
      };
      responses: {
        /** @description Updated */
        200: {
          content: {
            "application/json": components["schemas"]["Asset"];
          };
        };
      };
    };
    /** Delete asset */
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Deleted */
        200: {
          content: {
            "application/json": {
              success?: boolean;
            };
          };
        };
      };
    };
  };
  "/assets/batch": {
    /** Batch CSV import */
    post: {
      requestBody: {
        content: {
          "text/plain": string;
        };
      };
      responses: {
        /** @description Imported */
        201: {
          content: {
            "application/json": {
              imported?: number;
              items?: components["schemas"]["Asset"][];
            };
          };
        };
      };
    };
  };
  "/quotes/current": {
    /** Current quotes for all assets (latest snapshot) */
    get: {
      responses: {
        /** @description Array of quote snapshots */
        200: {
          content: {
            "application/json": components["schemas"]["QuoteSnapshot"][];
          };
        };
      };
    };
  };
  "/quotes/{id}/history": {
    /** Historical snapshots for asset */
    get: {
      parameters: {
        query?: {
          limit?: number;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Array of snapshots */
        200: {
          content: {
            "application/json": components["schemas"]["QuoteSnapshot"][];
          };
        };
      };
    };
  };
  "/alerts/history": {
    /** Alert history */
    get: {
      parameters: {
        query?: {
          symbol?: string;
          boundary?: "upper" | "lower";
          page?: number;
          pageSize?: number;
        };
      };
      responses: {
        /** @description Paginated alert history */
        200: {
          content: {
            "application/json": {
              data?: components["schemas"]["AlertHistory"][];
              page?: number;
              pageSize?: number;
              total?: number;
              totalPages?: number;
            };
          };
        };
      };
    };
  };
  "/admin/fetch-now": {
    /** Manually trigger fetch cycle (non-production) */
    post: {
      responses: {
        /** @description Cycle run started */
        200: {
          content: {
            "application/json": {
              success?: boolean;
            };
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Asset: {
      _id?: string;
      name?: string;
      symbol?: string;
      providerSymbol?: string;
      upperThreshold?: number | null;
      lowerThreshold?: number | null;
    };
    AssetCreate: {
      name: string;
      symbol: string;
      providerSymbol: string;
      upperThreshold?: number;
      lowerThreshold?: number;
    };
    AssetUpdate: {
      name?: string;
      upperThreshold?: number;
      lowerThreshold?: number;
    };
    QuoteSnapshot: {
      assetId?: string;
      symbol?: string;
      name?: string;
      price?: number;
      changePercent?: number;
      /** Format: date-time */
      takenAt?: string;
    };
    AlertHistory: {
      symbol?: string;
      boundary?: string;
      price?: number;
      threshold?: number;
      /** Format: date-time */
      triggeredAt?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
